struct Error {
    message: Str;
    code: Int;
}

func println(val: Int) -> Void {
    C_VOLATILE("printf(\"%d\\n\", val);");
}

func println(val: Float) -> Void {
    C_VOLATILE("printf(\"%f\\n\", val);");
}

func println(val: Str) -> Void {
    C_VOLATILE("printf(\"%s\\n\", val);");
}

func readInt() -> Int {
    C_VOLATILE("""
        int v;
        scanf("%d", &v);
        int c;
        while ((c = getchar()) != '\n' && c != EOF);
        return v;
    """);
}

func readStr() -> Str {
    C_VOLATILE("""
        char* line = NULL;
        size_t len = 0;
        getline(&line, &len, stdin);
        
        char* p = strchr(line, '\n');
        if (p) *p = 0;

        char* result = (char*)GC_MALLOC(strlen(line) + 1);
        strcpy(result, line);
        free(line); 
        
        return result;
    """);
}

func atoi(s: Str) -> Int {
    C_VOLATILE("return atoi(s);");
}

func ftoa(f: Float) -> Str {
    C_VOLATILE("""
        char* buffer = (char*)GC_MALLOC(48);
        snprintf(buffer, 48, "%f", f);
        return buffer;
    """);
}

func itoa(i: Int) -> Str {
    C_VOLATILE("""
        char* buffer = (char*)GC_MALLOC(12);
        snprintf(buffer, 12, "%d", i);
        return buffer;
    """);
}

func newIntArray(size: Int) -> [Int] {
    C_VOLATILE("return (int*)GC_MALLOC(size * sizeof(int));");
}

func newFloatArray(size: Int) -> [Float] {
    C_VOLATILE("return (float*)GC_MALLOC(size * sizeof(float));");
}
